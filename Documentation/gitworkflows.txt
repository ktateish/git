gitworkflows(7)
===============

NAME
----
gitworkflows - An overview of recommended workflows with Git

SYNOPSIS
--------
[verse]
git *

................................................................................
gitworkflows(7)
===============

名称
----
gitworkflows - Gitにおける推奨されるワークフローの概要

書式
----
[verse]
git *

................................................................................

DESCRIPTION
-----------

This document attempts to write down and motivate some of the workflow
elements used for `git.git` itself.  Many ideas apply in general,
though the full workflow is rarely required for smaller projects with
fewer people involved.

We formulate a set of 'rules' for quick reference, while the prose
tries to motivate each of them.  Do not always take them literally;
you should value good reasons for your actions higher than manpages
such as this one.

................................................................................
解説
----

このドキュメントは `git.git` それ自身で使われているワークフローの
要素を書きとめ、それを使いたいと思わせることを意図しています。
多くのアイデアが一般に適用できますが、より少人数が参加する小さな
プロジェクトで完全なワークフローを必要とするのは稀です。

私たちはクイックリファレンスのためにひとまとまりの 'ルール' をとりまとめ、
文章でそれぞれのルールへの動機を与えます。
言葉通りにとらないようにしてください;
重視すべきなのは、この文書のようなmanページの記述よりも
あなたがそうすべき理由の方です。
................................................................................

SEPARATE CHANGES
----------------

As a general rule, you should try to split your changes into small
logical steps, and commit each of them.  They should be consistent,
working independently of any later commits, pass the test suite, etc.
This makes the review process much easier, and the history much more
useful for later inspection and analysis, for example with
linkgit:git-blame[1] and linkgit:git-bisect[1].

To achieve this, try to split your work into small steps from the very
beginning. It is always easier to squash a few commits together than
to split one big commit into several.  Don't be afraid of making too
small or imperfect steps along the way. You can always go back later
and edit the commits with `git rebase --interactive` before you
publish them.  You can use `git stash save --keep-index` to run the
test suite independent of other uncommitted changes; see the EXAMPLES
section of linkgit:git-stash[1].

................................................................................

変更を分割する
--------------

一般的なルールとして、変更は小さな論理的ステップに
分割して、それぞれをコミットするよう心がけるべきです。
それらは一貫性があり、その後のどんなコミットからも
独立して機能し、テストを通過していて、(以下略。
これはレビュープロセスをより簡単にし、後から、
例えば linkgit:git-blame[1] や linkgit:git-bisect[1] で
調査・解析するときに、歴史をより価値のあるものにします。

これを達成するには、一番最初からあなたの作業を小さな
ステップに分割しておくよう心がけてください。
いくつかの小さなコミットを一緒にひとまとめにすることは、
大きなコミットを分割するよりも、常に簡単です。
作業を続けるにあたって、小さすぎる、または不完全なステップを
作成することを恐れてはいけません。
変更をpushするまえに、 `git rebase --interactive` を使って
後からいつでもそのコミットに戻って編集することができます。
他のコミットしていない変更の影響を受けずにテスト一式を走らせるのに、
`git stash save --keep-index` を使うこともできます。 linkgit:git-stash[1]
の EXAMPLES セクションを参照してください。

................................................................................

MANAGING BRANCHES
-----------------

There are two main tools that can be used to include changes from one
branch on another: linkgit:git-merge[1] and
linkgit:git-cherry-pick[1].

Merges have many advantages, so we try to solve as many problems as
possible with merges alone.  Cherry-picking is still occasionally
useful; see "Merging upwards" below for an example.

................................................................................

ブランチの管理
--------------

一つのブランチから他のブランチへと変更点を含ませるのに
使うことのできる主要なツールが2つあります: linkgit:git-merge[1]
とlinkgit:git-cherry-pick[1] です。

merge にはたくさんのアドバンテージがあります。
だから私たちは merge だけで可能な限り多くの問題を解決しようとします。
それでもcherry-pickは場合によって便利です。
例えば下記の "上流へのmerge" を参照してください。

................................................................................

Most importantly, merging works at the branch level, while
cherry-picking works at the commit level.  This means that a merge can
carry over the changes from 1, 10, or 1000 commits with equal ease,
which in turn means the workflow scales much better to a large number
of contributors (and contributions).  Merges are also easier to
understand because a merge commit is a "promise" that all changes from
all its parents are now included.

There is a tradeoff of course: merges require a more careful branch
management.  The following subsections discuss the important points.

................................................................................

もっとも重要な点は、mergeはブランチレベルで動作し、
一方cherry-pickはコミットレベルで動作するということです。
これは、merge が 1, 10, あるいは 1000 のコミットを
同等の簡単さで引き継げることを意味します。
これは同様にこのワークフローがより多くの貢献者
(および彼らの貢献)に対してスケールするということです。
merge は理解するのも、より簡単です。
なぜならmergeコミットは、全ての親の全ての変更は
このコミットに含まれている、という "約束" だからです。

もちろんトレードオフが存在します:
mergeはより注意深いブランチ管理を必要とします。
続くセクションではその要点について議論します。

................................................................................

Graduation
~~~~~~~~~~

As a given feature goes from experimental to stable, it also
"graduates" between the corresponding branches of the software.
`git.git` uses the following 'integration branches':

* 'maint' tracks the commits that should go into the next "maintenance
  release", i.e., update of the last released stable version;

* 'master' tracks the commits that should go into the next release;

* 'next' is intended as a testing branch for topics being tested for
  stability for master.

................................................................................

送り出し
~~~~~~~~

ある機能が実験的なものから安定したものへと移行するように、
ソフトウェアの対応するブランチ間でも機能が "送り出され" ます (Gradute)。
`git.git` では次のような '統合ブランチ' を使っています:

* 'maint' は次の "メンテナンスリリース" に入るべきコミットをたどります。
つまり、前回リリースされた安定バージョンのアップデートです。

* 'master' は次回のリリースに入るべきコミットをたどります。

* 'next' は master にむけたトピックの安定化のための
テスト用ブランチであることを意図しています。

................................................................................

There is a fourth official branch that is used slightly differently:

* 'pu' (proposed updates) is an integration branch for things that are
  not quite ready for inclusion yet (see "Integration Branches"
  below).

Each of the four branches is usually a direct descendant of the one
above it.

Conceptually, the feature enters at an unstable branch (usually 'next'
or 'pu'), and "graduates" to 'master' for the next release once it is
considered stable enough.

................................................................................
少し異なった使われ方をする4番目のブランチがあります:

* 'pu' (proposed updates, 提案中の変更)は、
含めるにはまだ時期尚早なコミット用の統合ブランチです。
(後述の "統合ブランチ" を参照してください)

4つのブランチは普通、それぞれのすぐ上に紹介したブランチの
直系の子孫になっています。

概念的には、機能は不安定なブランチ
(たいていは 'next' または 'pu' です)に入り、
十分安定したと思われれば時期リリースにむけて 'master'
に"送り出さ" れます。

 (訳注: 親子関係は
   (親) maint <- master <- next <- pu (子)
 となっていますが、開発の上流・下流でいうと
   (下) maint <- master <- next <- pu (上)
 となります。)
................................................................................

Merging upwards
~~~~~~~~~~~~~~~

The "downwards graduation" discussed above cannot be done by actually
merging downwards, however, since that would merge 'all' changes on
the unstable branch into the stable one.  Hence the following:

.Merge upwards
[caption="Rule: "]
=====================================
Always commit your fixes to the oldest supported branch that require
them.  Then (periodically) merge the integration branches upwards into each
other.
=====================================

This gives a very controlled flow of fixes.  If you notice that you
have applied a fix to e.g. 'master' that is also required in 'maint',
you will need to cherry-pick it (using linkgit:git-cherry-pick[1])
downwards.  This will happen a few times and is nothing to worry about
unless you do it very frequently.

................................................................................

上流へのmerge
~~~~~~~~~~~~~

上で議論したような "下流への送り出し" は実際には下流への merge
では行うことはできません。 mergeをすると不安定なブランチの
'全ての' 変更が merge されてしまうからです。従って、以下のようにします:

.上流へmergeする
[caption="ルール: "]
=====================
バグフィクスはそれを必要とする最も古いサポート対象の
ブランチにコミットします。そして、(周期的に)
その統合ブランチを上流の複数のブランチにそれそれぞれ merge します。
=====================

これは、非常に統制のとれたバグフィックスのワークフローを提供します。
もし、例えば 'master' に適用されたバグフィクスが 'maint'
でも必要とされていることに気づいたとしたら、
あなたは(linkgit:git-cherry-pick[1] を使って)下流に向けて cherry-pick
する必要があります。 このような事態は何度かは起こるでしょうが、
頻繁にやっているのでなければ心配する必要はありません。

................................................................................

Topic branches
~~~~~~~~~~~~~~

Any nontrivial feature will require several patches to implement, and
may get extra bugfixes or improvements during its lifetime.

Committing everything directly on the integration branches leads to many
problems: Bad commits cannot be undone, so they must be reverted one
by one, which creates confusing histories and further error potential
when you forget to revert part of a group of changes.  Working in
parallel mixes up the changes, creating further confusion.

Use of "topic branches" solves these problems.  The name is pretty
self explanatory, with a caveat that comes from the "merge upwards"
rule above:

................................................................................
トピックブランチ
~~~~~~~~~~~~~~~~

ささいな機能でない限り、実装に複数のpatchを必要とするはずです。
そしておそらくその生存期間においては、
追加のバグフィックスや機能改善を受け取るかもしれません。

統合ブランチになんでもかんでも直接コミットすることは、
たくさんの問題もたらします： 間違ったコミットはやりなおせず、
従ってそれらは一個一個リバートする必要があり、
それらは混乱する歴史を生み、一連のコミットグループの
一部だけリバートすることを忘れたりすると、
さらなる潜在的な間違いを生みます。
並列に作業することは、さらなる混乱を生みながら変更をごちゃまぜにします。

"トピックブランチ" の使用はこれらの問題を解決します。
この名前は非常に自己説明的なもので、
上で述べた "上流へmergeする" のルールが発する警告も含んでいます。

................................................................................

.Topic branches
[caption="Rule: "]
=====================================
Make a side branch for every topic (feature, bugfix, ...). Fork it off
at the oldest integration branch that you will eventually want to merge it
into.
=====================================

Many things can then be done very naturally:

* To get the feature/bugfix into an integration branch, simply merge
  it.  If the topic has evolved further in the meantime, merge again.
  (Note that you do not necessarily have to merge it to the oldest
  integration branch first.  For example, you can first merge a bugfix
  to 'next', give it some testing time, and merge to 'maint' when you
  know it is stable.)

* If you find you need new features from the branch 'other' to continue
  working on your topic, merge 'other' to 'topic'.  (However, do not
  do this "just habitually", see below.)

................................................................................
.トピックブランチ
[caption="ルール: "]
=====================================
すべてのトピック(機能追加、バグフィックス、...)用に、補助的なブランチを作ります。
そのブランチは、最終的にmergeしたいと思っている最も古い統合ブランチから分岐させます。
=====================================

多くのことを違和感なく行えます:

* その機能/バグフィックスを統合ブランチに入れるには、
  単にそれをmergeします。もしそのトピックが
  さらに改善され続けたのであれば、再びmergeします。
  (最も古いブランチに最初にmergeする必要はないことに注意してください。
  例えばバグフィックスは、最初は 'next' にmergeしてしばらくテストの期間を与え、
  そして安定したことがわかったら 'maint' にmergeすることができます)

* もし、あるトピック、例えば topic というブランチの上で作業を続けるのに
  他のブランチ 'other' の新しい機能が必要だとわかったら、 'other' ブランチを
  'topic' に mergeしてください。 (ただし、 "単なる習慣として"
  実行してはいけません。後述します)

................................................................................

* If you find you forked off the wrong branch and want to move it
  "back in time", use linkgit:git-rebase[1].

Note that the last point clashes with the other two: a topic that has
been merged elsewhere should not be rebased.  See the section on
RECOVERING FROM UPSTREAM REBASE in linkgit:git-rebase[1].

We should point out that "habitually" (regularly for no real reason)
merging an integration branch into your topics -- and by extension,
merging anything upstream into anything downstream on a regular basis
-- is frowned upon:

.Merge to downstream only at well-defined points
[caption="Rule: "]
=====================================
Do not merge to downstream except with a good reason: upstream API
changes affect your branch; your branch no longer merges to upstream
cleanly; etc.
=====================================

................................................................................
* もし間違ったブランチから分岐していたことに気づいて、 "過去に戻って"
  やり直したいのであれば、 linkgit:git-rebase[1] を使ってください。

最後の要点が他の2つと競合することに注意してください:
あるトピックがどこかにmergeされていた場合、
rebaseされるべきではありません。 linkgit:git-rebase[1] の上流のrebaseからの回復
(RECOVERING FROM UPSTREAM REBASE)のセクションを参照してください。

ここで、統合ブランチを "習慣的に" (大した理由なく定期的に)
トピックにmergeする(話を広げて、定期的に上流を下流にmergeする)
ことには賛成できない、という点を指摘しておくべきでしょう。

.明確な理由があるときだけ下流にmergeする
[caption="ルール: "]
=======================================
相応の理由(上流の API 変更があなたのブランチに影響を与えている;
あなたのブランチを上流に対してキレイにmergeできなくなっている; などなど)
がないのに、下流に対してmergeしてはいけません。
=======================================

................................................................................

Otherwise, the topic that was merged to suddenly contains more than a
single (well-separated) change.  The many resulting small merges will
greatly clutter up history.  Anyone who later investigates the history
of a file will have to find out whether that merge affected the topic
in development.  An upstream might even inadvertently be merged into a
"more stable" branch.  And so on.


Throw-away integration
~~~~~~~~~~~~~~~~~~~~~~

If you followed the last paragraph, you will now have many small topic
branches, and occasionally wonder how they interact.  Perhaps the
result of merging them does not even work?  But on the other hand, we
want to avoid merging them anywhere "stable" because such merges
cannot easily be undone.

................................................................................
そうしないと、mergeされたトピックは(うまく分割された)
単一の変更点以上のものを突然含むようになってしまいます。
その結果として生まれるたくさんの小さなmergeは歴史を
大いに散らかすことになります。
あるファイルの歴史をあとから調査する人は皆、
開発中のトピックにそのmergeが影響したかどうかを
調べなければならなくなります。
さらに、上流がうっかりと "より安定した"
ブランチへとmergeされてしまうかもしれません。
などなどです。


使い捨て統合
~~~~~~~~~~~~

先のパラグラフに従っていれば、小さなトピックブランチを
たくさん持っていることでしょう。
そして、場合によってはどうやってそれらを
相互作用させればよいのかと心配しているでしょう。
もしかしてそれらをmergeした結果、
動きさえしなくなってしまうのでは？
そして、一方で私達はそれらを "安定"
しているところへ mergeするのは避けたいと思っています。
そういったmergeは簡単にはやり直せないからです。

................................................................................

The solution, of course, is to make a merge that we can undo: merge
into a throw-away branch.

.Throw-away integration branches
[caption="Rule: "]
=====================================
To test the interaction of several topics, merge them into a
throw-away branch.  You must never base any work on such a branch!
=====================================

If you make it (very) clear that this branch is going to be deleted
right after the testing, you can even publish this branch, for example
to give the testers a chance to work with it, or other developers a
chance to see if their in-progress work will be compatible.  `git.git`
has such an official throw-away integration branch called 'pu'.

................................................................................
その解決方法はもちろん、やり直しがきくmergeをつくることです:
使い捨て統合ブランチへmergeしてください。

.使い捨て統合ブランチ
[caption="ルール: "]
==========================
いくつかのトピックの相互作用をテストするために、
使い捨ての統合ブランチへそれらをmergeします。
ただしそのようなブランチを作業ベースにしてはいけません!
==========================

もし、このブランチをテストの直後に確実に削除すると
(極めて)明確にしているのであれば、pushさえ可能です。
例えばテスターに対してそのブランチを使って作業する機会を与えるためにです。
あるいは、他の開発者にもしそれらの開発中の作業が
完了したらどうなるのかを見せるためにです。
`git.git` はそういった使い捨て統合のための 'pu'
という、公式なブランチを持っています。

................................................................................

Branch management for a release
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Assuming you are using the merge approach discussed above, when you
are releasing your project you will need to do some additional branch
management work.

A feature release is created from the 'master' branch, since 'master'
tracks the commits that should go into the next feature release.

The 'master' branch is supposed to be a superset of 'maint'. If this
condition does not hold, then 'maint' contains some commits that
are not included on 'master'. The fixes represented by those commits
will therefore not be included in your feature release.

To verify that 'master' is indeed a superset of 'maint', use git log:

................................................................................

リリースにむけたブランチ管理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

上で議論されたようなmergeアプローチをとっているとすれば、
プロジェクトをリリースしようというときには
いくつかのブランチ管理作業が追加で必要になります。

機能リリースは 'master' ブランチから作成されます。
なぜなら 'master' は次回の機能リリースに入るべき
コミットをたどっているからです。

'master' ブランチは 'maint' ブランチのスーパーセットであるべきです。
この条件を満たさない場合、'maint' ブランチは 'master'
に含まれないコミットを含むことになります。
従って、これらのコミットが対応するバグフィックスは、
機能リリースに含まれないということになってしまいます。

'mater' が 'maint' のスーパーセットであることを確認するには git log を使います:

................................................................................

.Verify 'master' is a superset of 'maint'
[caption="Recipe: "]
=====================================
`git log master..maint`
=====================================

This command should not list any commits.  Otherwise, check out
'master' and merge 'maint' into it.

Now you can proceed with the creation of the feature release. Apply a
tag to the tip of 'master' indicating the release version:

.Release tagging
[caption="Recipe: "]
=====================================
`git tag -s -m "Git X.Y.Z" vX.Y.Z master`
=====================================

................................................................................
.'master' が 'maint' のスーパーセットであることを確認する
[caption="レシピ: "]
===================================================
`git log master..maint`
===================================================

このコマンドではコミットはひとつもリストされるべきではありません。
もしリストされたら 'master' をcheckoutし、 'maint' をそこにmergeします。

これで機能リリースの作成作業を実行できるようになりました。
'master' の先端にリリースバージョンであることを示すタグをつけます:

.リリースタグの作成
[caption="レシピ: "]
===================================================
`git tag -s -m "Git X.Y.Z" vX.Y.Z master`
===================================================

................................................................................

You need to push the new tag to a public Git server (see
"DISTRIBUTED WORKFLOWS" below). This makes the tag available to
others tracking your project. The push could also trigger a
post-update hook to perform release-related items such as building
release tarballs and preformatted documentation pages.

Similarly, for a maintenance release, 'maint' is tracking the commits
to be released. Therefore, in the steps above simply tag and push
'maint' rather than 'master'.


Maintenance branch management after a feature release
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After a feature release, you need to manage your maintenance branches.

First, if you wish to continue to release maintenance fixes for the
feature release made before the recent one, then you must create
another branch to track commits for that previous release.

................................................................................
この新しいタグを公開Gitサーバにpushする必要があります
(後述の"分散ワークフロー"を参照してください)。
これによりあなたのプロジェクトを追っている
皆に対してタグを有効化できます。
このpushはまた、post-updateフックをトリガーすることができ、
リリース用tarボールや、事前フォーマットされた
ドキュメントページを作成することに使えます。

同じように、メンテナンスリリースに対しては、
'maint' がリリースされるべきコミットをたどっているので、
上記のステップのタグ付けとpushを、 単に 'master' ではなく
'maint' に対してすればよいことになります。


機能リリース後のメンテナンスブランチ管理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

機能リリースの後は、そのメンテナンスブランチを管理する必要があります。

最初に、最新の機能リリースの前に作られた
機能リリース用のメンテナンスフィックスを
リリースし続けたいのであれば、
そのリリース用のコミットを追跡する
別のブランチを作っておく必要があります。

................................................................................

To do this, the current maintenance branch is copied to another branch
named with the previous release version number (e.g. maint-X.Y.(Z-1)
where X.Y.Z is the current release).

.Copy maint
[caption="Recipe: "]
=====================================
`git branch maint-X.Y.(Z-1) maint`
=====================================

The 'maint' branch should now be fast-forwarded to the newly released
code so that maintenance fixes can be tracked for the current release:

.Update maint to new release
[caption="Recipe: "]
=====================================
* `git checkout maint`
* `git merge --ff-only master`
=====================================

................................................................................

これを実行するには、現在のメンテナンスブランチを
前のリリースバージョン番号の名前でコピーしておきます。
(例えば最新リリースがX.Y.Z であれば、maint-X.Y.(Z-1)です)

.maintをコピーする
[caption="レシピ: "]
=====================================
`git branch maint-X.Y.(Z-1) maint`
=====================================

今度は 'maint' ブランチを新たにリリースされた
コードへとfast-forwardします。
これはメンテナンスフィックスが
最新リリースを辿れるようにするためです。

.新しいリリースへと maint を更新する
[caption="レシピ: "]
=====================================
* `git checkout maint`
* `git merge --ff-only master`
=====================================

................................................................................

If the merge fails because it is not a fast-forward, then it is
possible some fixes on 'maint' were missed in the feature release.
This will not happen if the content of the branches was verified as
described in the previous section.


Branch management for next and pu after a feature release
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After a feature release, the integration branch 'next' may optionally be
rewound and rebuilt from the tip of 'master' using the surviving
topics on 'next':

................................................................................
もしmergeが失敗したとすれば、
それはfast-forwardではないからです。
そうであれば 'maint' 上のいくつかのバグフィックスが
機能リリース内から欠けていることになります。
このような事態は、先のセクションで述べたように、
'master' と 'maint' ブランチの内容を確認しておけば、
発生しないはずです。

機能リリース後の next および pu のブランチ管理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

機能リリース後、統合ブランチ 'next' は
'master' の先端へと巻き戻し、
もとの 'next' 上に生き残っていたトピックブランチを
使って再構成して構いません。

................................................................................

.Rewind and rebuild next
[caption="Recipe: "]
=====================================
* `git checkout next`
* `git reset --hard master`
* `git merge ai/topic_in_next1`
* `git merge ai/topic_in_next2`
* ...
=====================================

The advantage of doing this is that the history of 'next' will be
clean. For example, some topics merged into 'next' may have initially
looked promising, but were later found to be undesirable or premature.
In such a case, the topic is reverted out of 'next' but the fact
remains in the history that it was once merged and reverted. By
recreating 'next', you give another incarnation of such topics a clean
slate to retry, and a feature release is a good point in history to do
so.

................................................................................
.next を巻き戻して再構成する
[caption="レシピ: "]
=====================================
* `git checkout next`
* `git reset --hard master`
* `git merge ai/topic_in_next1`
* `git merge ai/topic_in_next2`
* ...
=====================================

これを実行する利点は、 'next' の歴史がキレイになることです。
例えば、いくつかの 'next' にmergeされたトピックブランチが
最初は良く見えていたのに、後で望ましくない、あるいは
早まったものだったとわかったとします。
このようなケースでは、そのトピックブランチは
'next' からリバートされるべきですが、
歴史の中にはmergeされ、リバートされたという事実が残ってしまいます。
'next' を作りなおすことにより、生まれ変わったトピックブランチに対して、
やり直しのためのキレイな黒板を与えることができます。
機能リリースは、それを実行するちょうど良い歴史上のポイントなのです。

................................................................................

If you do this, then you should make a public announcement indicating
that 'next' was rewound and rebuilt.

The same rewind and rebuild process may be followed for 'pu'. A public
announcement is not necessary since 'pu' is a throw-away branch, as
described above.


DISTRIBUTED WORKFLOWS
---------------------

After the last section, you should know how to manage topics.  In
general, you will not be the only person working on the project, so
you will have to share your work.

................................................................................
これを実行するのであれば、 'next' の巻き戻しと再構成に
関する公式アナウンスをすべきです。

同じ巻き戻しと再構成のプロセスが 'pu' にも適用されます。
'pu' は上で述べたように使い捨てブランチなので、
公式アナウンスは不要です。

分散ワークフロー
----------------

先のセクションで、どうやってトピックを管理するかを学びました。
ふつう、そのプロジェクトで作業しているのはあなただけではないでしょう。
だから、あなたは作業結果を共有しなければならないはずです。

................................................................................

Roughly speaking, there are two important workflows: merge and patch.
The important difference is that the merge workflow can propagate full
history, including merges, while patches cannot.  Both workflows can
be used in parallel: in `git.git`, only subsystem maintainers use
the merge workflow, while everyone else sends patches.

Note that the maintainer(s) may impose restrictions, such as
"Signed-off-by" requirements, that all commits/patches submitted for
inclusion must adhere to.  Consult your project's documentation for
more information.

................................................................................
大雑把にいうと、ふたつの重要なワークフローがあります:
mergeとpatchです。
重要な違いは、mergeワークフローはmergeを含む全ての歴史を
伝搬させることができ、一方patchではできない、ということです。
両方のワークフローは並行して使うことができます:
`git.git` においてはサブシステムのメンテナたちだけが
mergeワークフローを使っており、他の人たちは皆patchを送っています。

メンテナは、例えば「Signed-off-by」要求といった、
提出されるすべてのコミット/patchがそこに含めなければ
ならないような制限を課すことがあるという点について注意してください。

................................................................................

Merge workflow
~~~~~~~~~~~~~~

The merge workflow works by copying branches between upstream and
downstream.  Upstream can merge contributions into the official
history; downstream base their work on the official history.

There are three main tools that can be used for this:

* linkgit:git-push[1] copies your branches to a remote repository,
  usually to one that can be read by all involved parties;

* linkgit:git-fetch[1] that copies remote branches to your repository;
  and

* linkgit:git-pull[1] that does fetch and merge in one go.

Note the last point.  Do 'not' use 'git pull' unless you actually want
to merge the remote branch.

................................................................................
mergeワークフロー
~~~~~~~~~~~~~~~~~

mergeワークフローは上流と下流の間でブランチを
コピーすることによってなされます。
上流は貢献内容を公式な歴史へとmergeできます。
下流は作業を公式な歴史の上で行います。

これを実行するのに3つの主要なツールがあります。

* linkgit:git-push[1] はあなたのブランチをリモートのリポジトリ、
  普通はすべての参加者にが読み込み可能なひとつのリポジトリにコピーします。

* linkgit:git-fetch[1] はリモートブランチをあなたのリポジトリにコピーします:
  そして、

* linkgit:git-pull[1] は fetch と merge を一気に行います。

最後の項目に注意してください。
リモートブランチをmergeしたいのでなければ、
'git pull' を使っては 'いけません' 。

................................................................................

Getting changes out is easy:

.Push/pull: Publishing branches/topics
[caption="Recipe: "]
=====================================
`git push <remote> <branch>` and tell everyone where they can fetch
from.
=====================================

You will still have to tell people by other means, such as mail.  (Git
provides the linkgit:git-request-pull[1] to send preformatted pull
requests to upstream maintainers to simplify this task.)

If you just want to get the newest copies of the integration branches,
staying up to date is easy too:

................................................................................
変更を公開するのは簡単です:

.Push/Pull: ブランチ/トピックを公開する
[caption="レシピ: "]
=====================================
`git push <remote> <branch>` を実行し、皆にfetchできる場所を知らせます。
=====================================

メールのような異なる方法で他の人に知らせる必要があるでしょう。
(Gitは、この作業を簡素化するために、事前にフォーマットされたプルリクエストを
 上流のメンテナに送る linkgit:git-request-pull[1] を提供しています)

もし単に統合ブランチの最新のコピーを取得したいだけであれば、
新しい状態に保つことも簡単です:

................................................................................

.Push/pull: Staying up to date
[caption="Recipe: "]
=====================================
Use `git fetch <remote>` or `git remote update` to stay up to date.
=====================================

Then simply fork your topic branches from the stable remotes as
explained earlier.

If you are a maintainer and would like to merge other people's topic
branches to the integration branches, they will typically send a
request to do so by mail.  Such a request looks like

-------------------------------------
Please pull from
    <url> <branch>
-------------------------------------

................................................................................
.Push/Pull: 最新の状態に保つ
[caption="レシピ: "]
=======================================================
最新の状態に保つには、 `git fetch <remote>`
または `git remote update` を使います。
=======================================================

そして、先に説明したとおり、単にリモートの
安定ブランチからあなたのトピックブランチを分岐させてください。

もしあなたがメンテナで、他の人たちのトピックブランチを
統合ブランチにmergeしたいのであれば、
他の人たちは普通そうしてくれとメールで要求を送るでしょう。
要求はこんなかんじになります。

-------------------------------------
以下からプルしてください
    <url> <branch>
-------------------------------------

................................................................................

In that case, 'git pull' can do the fetch and merge in one go, as
follows.

.Push/pull: Merging remote topics
[caption="Recipe: "]
=====================================
`git pull <url> <branch>`
=====================================

Occasionally, the maintainer may get merge conflicts when he tries to
pull changes from downstream.  In this case, he can ask downstream to
do the merge and resolve the conflicts themselves (perhaps they will
know better how to resolve them).  It is one of the rare cases where
downstream 'should' merge from upstream.

................................................................................
このケースでは、以下のように 'git pull' で
一気に fetch と merge を実行できます。

.Push/Pull: リモートのトピックのmerge
[caption="レシピ: "]
=====================================
`git pull <url> <branch>`
=====================================

場合によっては、メンテナが下流から変更をpullしようとしたときに、
mergeコンフリクトが発生するかもしれません。
このケースでは、下流の開発者に対してmergeと
コンフリクトの解消をお願いすることができます
(たぶん、彼らのほうがどうやって解消するかよくわかっているでしょうし)。
これは下流が上流からmerge 'すべき'
数少ないケースです。

................................................................................

Patch workflow
~~~~~~~~~~~~~~

If you are a contributor that sends changes upstream in the form of
emails, you should use topic branches as usual (see above).  Then use
linkgit:git-format-patch[1] to generate the corresponding emails
(highly recommended over manually formatting them because it makes the
maintainer's life easier).

.format-patch/am: Publishing branches/topics
[caption="Recipe: "]
=====================================
* `git format-patch -M upstream..topic` to turn them into preformatted
  patch files
* `git send-email --to=<recipient> <patches>`
=====================================

See the linkgit:git-format-patch[1] and linkgit:git-send-email[1]
manpages for further usage notes.

................................................................................
Patch ワークフロー
~~~~~~~~~~~~~~~~~~

もしあなたが貢献者で、emailで変更点を上流へ送るのであれば、
普段どおりトピックブランチを使うべきです(上のほうを参照)。
そして、それに対応するemailを生成するのに、
linkgit:git-format-patch[1] を使います。
(これは手でフォーマットするよりも推奨されます。
 メンテナ生活を楽にするためです。)

.format-patch/am: ブランチ/トピックを公開する
[caption="レシピ: "]
=======================================================
* `git format-patch -M upstream..topic` を使って、
トピックブランチを事前フォーマットされた形式に変換します。
* `git send-email --to=<受信者> <パッチ(複数)>`
=======================================================

さらなる利用上の注意については linkgit:git-format-patch[1]
および linkgit:git-send-email[1]のmanページを参照してください。

................................................................................

If the maintainer tells you that your patch no longer applies to the
current upstream, you will have to rebase your topic (you cannot use a
merge because you cannot format-patch merges):

.format-patch/am: Keeping topics up to date
[caption="Recipe: "]
=====================================
`git pull --rebase <url> <branch>`
=====================================

You can then fix the conflicts during the rebase.  Presumably you have
not published your topic other than by mail, so rebasing it is not a
problem.

If you receive such a patch series (as maintainer, or perhaps as a
reader of the mailing list it was sent to), save the mails to files,
create a new topic branch and use 'git am' to import the commits:

................................................................................

メンテナがあなたに対して、
「あなたのpatchは現在の上流にはもう適用できない」と伝えてきたら、
あなたのトピックをrebaseしなければいけません
(ここではmergeを使うことはできません。
 なぜならmergeをformat-patchできないからです。):

.format-patch/am: トピックを最新の状態に保つ
[caption="レシピ: "]
=======================================================
`git pull --rebase <url> <branch>`
=======================================================

このrebaseを実行する中でコンフリクトを修正することができます。
多分あなたはemail以外ではトピックを
公開していないでしょうから、rebaseによって
問題が発生することはありません。

もしそのような一連のpatchを(メンテナとして、または、
おそらくメーリングリストに送られたものを購読者として)
受け取ったのであれば、そのメールをファイルにセーブして、
トピックブランチを作成し、それらのコミットを
'git am' でインポートします:

................................................................................

.format-patch/am: Importing patches
[caption="Recipe: "]
=====================================
`git am < patch`
=====================================

One feature worth pointing out is the three-way merge, which can help
if you get conflicts: `git am -3` will use index information contained
in patches to figure out the merge base.  See linkgit:git-am[1] for
other options.

................................................................................

.format-patch/am: patch をインポートする
[caption="レシピ: "]
=====================================
`git am < patch`
=====================================

ここで指摘するに値する機能は3way mergeです。
これは、コンフリクトが発生した場合に便利です: `git am -3`
は、mergeベースを検出するのに、 patchに含まれる情報を使います。
他のオプションについては linkgit:git-am[1] を参照してください。

................................................................................

SEE ALSO
--------
linkgit:gittutorial[7],
linkgit:git-push[1],
linkgit:git-pull[1],
linkgit:git-merge[1],
linkgit:git-rebase[1],
linkgit:git-format-patch[1],
linkgit:git-send-email[1],
linkgit:git-am[1]

GIT
---
Part of the linkgit:git[1] suite.

................................................................................

あわせて読みたい
----------------
linkgit:gittutorial[7],
linkgit:git-push[1],
linkgit:git-pull[1],
linkgit:git-merge[1],
linkgit:git-rebase[1],
linkgit:git-format-patch[1],
linkgit:git-send-email[1],
linkgit:git-am[1]

GIT
---
gitworkflows は linkgit:git[1] の一部です。

................................................................................
